import React, { useState, useEffect } from "react";

import { useForm } from "react-hook-form";

import { useMutation } from "@apollo/react-hooks";

import {
  Card,
  Text,
  Button,
  Form,
  Flex,
  Input,
  TextArea,
  theme,
} from "bushido-strap";
import { EDIT_TODO } from "../../../queries/editTodo";
import { ADD_TODO } from "../../../queries/addTodo";
// import { MY_TODOS_QUERY } from "../../../queries/myTodos";
import { ApolloQueryResult } from "apollo-boost";

interface Todo {
  id: number;
  name: string;
  description: string;
  complete: boolean;
}
interface Props {
  todos: Array<Todo>;
  fetchMyTodos: () => Promise<ApolloQueryResult<any>>;
}

export default function Todos({ todos, fetchMyTodos }: Props) {
  const { handleSubmit, register } = useForm();
  const [create, setCreate] = useState<Boolean>(false);
  // const [complete, setComplete] = useState<Boolean>(false);
  const [editTodo] = useMutation(EDIT_TODO);
  const [addTodo] = useMutation(ADD_TODO);

  useEffect(() => {
    fetchMyTodos();
  }, []);

  const onAddTodo = async (data: any) => {
    console.log(data);
    await addTodo({
      variables: {
        data: {
          name: data.name,
          description: data.description,
        },
      },
      // refetchQueries: [{ query: MY_TODOS_QUERY }],
    });
    setCreate(!create);
  };
  console.log("todos:", todos);

  return (
    <Card bg={theme.whiteAlpha6}>
      <Button red>Clear Completed</Button>
      {todos?.map((todo) => {
        const [edit, setEdit] = useState<Boolean>(false);
        const toggleEdit = (data: any) => {
          console.log("edit data", data);
          setEdit(!edit);
          // editTodo({
          //   variables: {
          //     data: {
          //       name: data.id,
          //     },
          //   },
          // });
        };
        const onEditTodo = (data: any) => {
          console.log(data);
        };
        return (
          <Card invert key={todo.id} stretch>
            <Form onSubmit={handleSubmit(onEditTodo)}>
              {edit ? (
                <Input
                  name="name"
                  type="text"
                  ref={register}
                  value={todo.name}
                />
              ) : (
                <Text lf bold color={!todo.complete ? theme.gray1 : theme.red5}>
                  {todo.name}
                </Text>
              )}
              <Text>{todo.description}</Text>
            </Form>
            <Flex jcBetween stretch>
              <Button orange onClick={toggleEdit}>
                Edit
              </Button>
              <Button
                violet
                onClick={async (e: any) => {
                  e.preventDefault();
                  try {
                    await editTodo({
                      variables: {
                        data: {
                          id: todo.id,
                          complete: !todo.complete,
                        },
                      },
                    });
                  } catch (err) {
                    console.log("ERROR MESSAGE", err.networkError);
                    console.log("ERR KEYS:", Object.keys(err));
                  }
                  console.log("todo complete status", !todo.complete);
                }}
              >
                {todo?.complete ? "Mark Not Complete" : "Mark Complete"}
              </Button>
            </Flex>
          </Card>
        );
      })}
      <Form onSubmit={handleSubmit(onAddTodo)} stretch>
        {create ? (
          <Flex drape stretch>
            <Input
              ref={register}
              stretch
              name="name"
              placeholder="Name of todo..."
            />
            <TextArea
              ref={register}
              stretch
              name="description"
              placeholder="Todos description..."
            />
          </Flex>
        ) : null}
        <Flex>
          <Button type="button" teal onClick={() => setCreate(!create)}>
            {create ? "Cancel" : "Add Todo"}
          </Button>
          {create ? (
            <Button green type="submit">
              Submit
            </Button>
          ) : null}
        </Flex>
      </Form>
    </Card>
  );
}

